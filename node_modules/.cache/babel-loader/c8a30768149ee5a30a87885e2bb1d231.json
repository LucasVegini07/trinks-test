{"ast":null,"code":"import _defineProperty from \"/home/lucasvegini/Desktop/Trinken/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/lucasvegini/Desktop/Trinken/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lucasvegini/Desktop/Trinken/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/lucasvegini/Desktop/Trinken/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lucasvegini/Desktop/Trinken/frontend/src/pages/Start/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport * as starWarsAPI from \"../../util/API/starWarsAPI\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport FilmCard from \"../../components/Cards/Film\";\nexport default function Start(props) {\n  var _React$createElement;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      textSearch = _useState2[0],\n      setTextSearch = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allMoviesObjetic = _useState4[0],\n      setAllMoviesObject = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allMovies = _useState6[0],\n      setAllMovies = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      allPeople = _useState8[0],\n      setAllPeople = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      filtredMovies = _useState10[0],\n      setFiltredMovies = _useState10[1];\n\n  useEffect(function () {\n    function getData() {\n      return _getData.apply(this, arguments);\n    }\n\n    function _getData() {\n      _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getAllFilmds();\n\n              case 2:\n                _context.next = 4;\n                return getAllPeople();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getData.apply(this, arguments);\n    }\n\n    getData();\n  }, []);\n\n  function getAllFilmds() {\n    return _getAllFilmds.apply(this, arguments);\n  }\n\n  function _getAllFilmds() {\n    _getAllFilmds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, movies;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return starWarsAPI.getAllFilms();\n\n            case 2:\n              response = _context2.sent;\n              setAllMovies(response.data.results);\n              movies = {};\n              response.data.results.map(function (movie) {\n                return movies[movie.url] = movie;\n              });\n              setAllMoviesObject(movies);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getAllFilmds.apply(this, arguments);\n  }\n\n  function getAllPeople() {\n    return _getAllPeople.apply(this, arguments);\n  }\n\n  function _getAllPeople() {\n    _getAllPeople = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return starWarsAPI.getAllPeople();\n\n            case 2:\n              response = _context3.sent;\n              setAllPeople(response.data.results);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _getAllPeople.apply(this, arguments);\n  }\n\n  function filter(_x) {\n    return _filter.apply(this, arguments);\n  }\n\n  function _filter() {\n    _filter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(value) {\n      var nameFilter, _filtredMovies;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              setTextSearch(value);\n\n              if (\"pessoa\" === \"as\") {\n                setFiltredMovies(allMovies.filter(function (movie) {\n                  return movie.title.split(' ').join('').toLowerCase().includes(textSearch.split(' ').join('').toLowerCase());\n                }));\n              } else {\n                nameFilter = allPeople.filter(function (character) {\n                  return character.name.split(' ').join('').toLowerCase().includes(textSearch.split(' ').join('').toLowerCase());\n                });\n                console.log(\"nameFilter\", nameFilter);\n\n                if (nameFilter.length === 1) {\n                  _filtredMovies = [];\n                  nameFilter[0].films.map(function (filmUrl) {\n                    _filtredMovies.push(allMoviesObjetic[filmUrl]);\n                  });\n                  setFiltredMovies(_filtredMovies);\n                }\n              }\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _filter.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, (_React$createElement = {\n    style: {\n      marginBottom: 16\n    },\n    variant: \"filled\",\n    id: \"outlined-required\",\n    label: \"Pesquisa\"\n  }, _defineProperty(_React$createElement, \"variant\", \"outlined\"), _defineProperty(_React$createElement, \"margin\", \"dense\"), _defineProperty(_React$createElement, \"fullWidth\", true), _defineProperty(_React$createElement, \"value\", textSearch), _defineProperty(_React$createElement, \"onChange\", function onChange(event) {\n    return filter(event.target.value);\n  }), _defineProperty(_React$createElement, \"__self\", this), _defineProperty(_React$createElement, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }), _React$createElement)), filtredMovies.map(function (movie) {}));\n}","map":{"version":3,"sources":["/home/lucasvegini/Desktop/Trinken/frontend/src/pages/Start/index.js"],"names":["React","useState","useEffect","starWarsAPI","Button","TextField","FilmCard","Start","props","textSearch","setTextSearch","allMoviesObjetic","setAllMoviesObject","allMovies","setAllMovies","allPeople","setAllPeople","filtredMovies","setFiltredMovies","getData","getAllFilmds","getAllPeople","getAllFilms","response","data","results","movies","map","movie","url","filter","value","title","split","join","toLowerCase","includes","nameFilter","character","name","console","log","length","films","filmUrl","push","marginBottom","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as starWarsAPI from \"../../util/API/starWarsAPI\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport FilmCard from \"../../components/Cards/Film\"\n\nexport default function Start(props) {\n  const [textSearch, setTextSearch] = useState(\"\");\n  const [allMoviesObjetic, setAllMoviesObject] = useState({});\n  const [allMovies, setAllMovies] = useState({});\n  const [allPeople, setAllPeople] = useState([]);\n  const [filtredMovies, setFiltredMovies] = useState([]);\n\n  useEffect(() => {\n    async function getData() {\n      await getAllFilmds();\n      await getAllPeople();\n    }\n    getData();\n  }, [])\n\n  async function getAllFilmds() {\n    const response = await starWarsAPI.getAllFilms()\n    setAllMovies(response.data.results)\n    let movies = {}\n    response.data.results.map(movie => (\n      movies[movie.url] = movie\n    ))\n    setAllMoviesObject(movies)\n  }\n\n  async function getAllPeople() {\n    const response = await starWarsAPI.getAllPeople()\n    setAllPeople(response.data.results)\n  }\n\n  async function filter(value) {\n    setTextSearch(value);\n    if (\"pessoa\" === \"as\") {\n      setFiltredMovies(allMovies.filter((movie) =>\n        movie.title.split(' ').join('').toLowerCase().includes(textSearch.split(' ').join('').toLowerCase())\n      ))\n    }\n    else {\n      let nameFilter = allPeople.filter((character) =>\n        character.name.split(' ').join('').toLowerCase().includes(textSearch.split(' ').join('').toLowerCase())\n      )\n      console.log(\"nameFilter\", nameFilter)\n      if (nameFilter.length === 1) {\n        let filtredMovies = [];\n\n        nameFilter[0].films.map(filmUrl => {\n          filtredMovies.push(allMoviesObjetic[filmUrl]);\n        })\n        setFiltredMovies(filtredMovies)\n      }\n    }\n  }\n\n  return (\n    <div>\n      <TextField\n        style={{ marginBottom: 16 }}\n        variant=\"filled\"\n        id=\"outlined-required\"\n        label=\"Pesquisa\"\n        variant=\"outlined\"\n        margin=\"dense\"\n        fullWidth\n        value={textSearch}\n        onChange={(event) => filter(event.target.value)}\n      />\n      {filtredMovies.map(movie => {\n      })}\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}